module QNM
using OrdinaryDiffEq, BoundaryValueDiffEq, Plots, DifferentialEquations
export uBoundaryNumerical, uHorizonNumerical, shear_mode_eq!, boundary_condition!, simple_shear_mode_eq!, simple_boundary_condition!, plotQNM, phiHorizonExpansion, dphiHorizonExpansion, ddphi, computeShearMode

#---------------------------------------------------------#
# Prone to changes :)

function computeShearMode(q, k, omega, solver=Rodas5P(), dtmax=0.01)
    parameters = [1.0, q, k, omega] # Constants for the differential equation
    
    # Pre calculate the values for the boundary conditions
    horizonExpansionValues = [phiHorizonExpansion(uHorizonNumerical, parameters...), dphiHorizonExpansion(uHorizonNumerical, parameters...)]
    parameters = vcat(parameters, horizonExpansionValues)
    # println("Finished horizonExpansionValues: ", horizonExpansionValues)

    # I am still not sure what the real boundary conditions are
    u0 = [0, 0, 0, 0]; # initial conditions
	# u0 = [real(horizonExpansionValues[1]), imag(horizonExpansionValues[1]), real(horizonExpansionValues[2]), imag(horizonExpansionValues[2])]; # initial conditions

	tspan = (QNM.uBoundaryNumerical, QNM.uHorizonNumerical) # Possible values for u

    boundary_value_problem = BVProblem(simple_shear_mode_eq!, simple_boundary_condition!, u0, tspan, parameters)

    solution = solve(boundary_value_problem, Shooting(solver), dt=dtmax/10, dtmax=dtmax)
    # display(plot(solution, idxs=[1, 2], title="QNM"))

    println("Computing QNM with q = ", q, ", k = ", k, ", omega = ", omega, " -> ", solution.u[1][1] + solution.u[1][1] * im)
    # We are checking for roots at the boundary (so the first element of the solution)
    return solution[1][1] + im * solution[1][2]
end

#---------------------------------------------------------#

#---------------------------------------------------------#
# Quasinormal modes #

# epsilon = big(1.0)/big(1000000000.0)
# uBoundaryNumerical = epsilon
# uHorizonNumerical = big(1.0)-big(1.0)/big(10.0)

epsilon = 1.0/1000000000.0
uBoundaryNumerical = epsilon
uHorizonNumerical = 1.0-1.0/10.0

ddphi(t, phi, dphi, q, k, omega) = (-4*dphi*(-1 + t)*(-1 + t*(-1 + q^2*t))*(-1 + t^2*(-1 + q^2*(-1 + 2*t))) + phi*(-omega^2 + k^2*(-1 + t)*(-1 + t*(-1 + q^2*t))))/(4*(-1 + t)^2*t*(1 + t - q^2*t^2)^2)

# Differential equation with static omega
function simple_shear_mode_eq!(du, u, p, t)
    # u is current state variable, du is the derivative of u at time t, t is current time
    c0, q, k, omega, _, _ = p # p is a vector of parameters
    phiReal, phiImag, dphiReal, dphiImag = u

    phi = phiReal + im * phiImag
    dphi = dphiReal + im * dphiImag

    du[1] = dphiReal
    du[2] = dphiImag
    eq = ddphi(t, phi, dphi, q, k, omega)
    du[3] = real(eq)
    du[4] = imag(eq)
end

# Boundary conditions with static omega
function simple_boundary_condition!(residual, u, parameters, t)
    _, _, _, _, phiHorizon, dphiHorizon = parameters
    residual[1] = real(phiHorizon) - u[end][1] # solution at horizon should be the horizon expansion
    residual[2] = imag(phiHorizon) - u[end][2] # solution at horizon should be the horizon expansion
    residual[3] = real(dphiHorizon) - u[end][3] # derivative at horizon should be the derivative of the horizon expansion
    residual[4] = imag(dphiHorizon) - u[end][4] # derivative at horizon should be the derivative of the horizon expansion
end

# Differential equation with varible omega
function shear_mode_eq!(du, u, p, t)
    # u is current state variable, du is the derivative of u at time t, t is current time
    c0, q, k = p # p is a vector of parameters

    phiReal, phiImag, dphiReal, dphiImag, omegaReal, omegaImag = u

    phi = phiReal + im * phiImag
    dphi = dphiReal + im * dphiImag
    omega = omegaReal + im * omegaImag

    du[1] = dphiReal
    du[2] = dphiImag
    eq = ddphi(t, phi, dphi, q, k, omega)
    du[3] = real(eq)
    du[4] = imag(eq)

    # Boundary condtions for omega
    du[5] = 0
    du[6] = 0
end

# Boundary conditions with variable omega
function boundary_condition!(residual, u, p, t)
    c0, q, k = p
    vars = [c0, q, k, u[end][5] + im * u[end][6]]
    residual[1] = real(phiHorizonExpansion(uHorizonNumerical, vars...)) - u[end][1] # solution at horizon should be the horizon expansion
    residual[2] = imag(phiHorizonExpansion(uHorizonNumerical, vars...)) - u[end][2] # solution at horizon should be the horizon expansion
    residual[3] = real(dphiHorizonExpansion(uHorizonNumerical, vars...)) - u[end][3] # derivative at horizon should be the derivative of the horizon expansion
    residual[4] = imag(dphiHorizonExpansion(uHorizonNumerical, vars...)) - u[end][4] # derivative at horizon should be the derivative of the horizon expansion
end

#---------------------------------------------------------#
# Horizon expansion
I = im
function phiHorizonExpansion(u, c0, q, k, omega)
    coefficents = computeExpansionCoefficients(q, k, omega)
    return (1-u)^(omega * im / (2 * (-2 + q^2))) * sum([coefficents[i] * (1-u)^(i-1) for i in 1:14])
end

function dphiHorizonExpansion(u, c0, q, k, omega)
    coefficents = computeExpansionCoefficients(q, k, omega)
    return (1-u)^(omega * im / (2 * (-2 + q^2))) * sum([coefficents[i] * (1-i) * (1-u)^(i-2) for i in 1:14]) - 
    (omega * im / (2 * (-2 + q^2))) * (1-u)^(omega * im / (2 * (-2 + q^2)) - 1) * sum([coefficents[i] * (1-u)^(i-1) for i in 1:14]) 
end

function computeExpansionCoefficients(q, k, omega, c0=1)
    return [c0, cphiH1(q, k, omega, c0), cphiH2(q, k, omega, c0), cphiH3(q, k, omega, c0), cphiH4(q, k, omega, c0), cphiH5(q, k, omega, c0), cphiH6(q, k, omega, c0), cphiH7(q, k, omega, c0), cphiH8(q, k, omega, c0), cphiH9(q, k, omega, c0), cphiH10(q, k, omega, c0), cphiH11(q, k, omega, c0), cphiH12(q, k, omega, c0), cphiH13(q, k, omega, c0)]
end

cphiH1(q, k, omega, c0) = -(((k^2*(-2 + q^2)^2 + omega*(4*I - 4*omega + (2*I + 5*omega)*q^2 - 2*I*q^4))*c0)/(4*(-2 + q^2)^2*(-2 + I*omega + q^2)))
cphiH2(q, k, omega, c0) = ((omega^4*(4 - 5*q^2)^2 + k^2*(8 + k^2 - 16*q^2)*(-2 + q^2)^4 + 8*I*omega*(-2 + q^2)^3*(-2 + k^2 - 2*(-3 + k^2)*q^2 + 2*q^4) - 4*I*omega^3*(-2 + q^2)*(7 - 21*q^2 + 20*q^4) - 2*omega^2*(-2 + q^2)^2*(4 - 22*q^2 + 46*q^4 + k^2*(4 - 5*q^2)))*c0)/(32*(-2 + q^2)^4*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2))
cphiH3(q, k, omega, c0) = -(((omega^6*(-4 + 5*q^2)^3 - 6*I*omega^5*(-2 + q^2)*(-4 + 5*q^2)*(18 - 43*q^2 + 35*q^4) + 12*I*omega^3*(-2 + q^2)^3*(-60 + 214*q^2 - 412*q^4 + 430*q^6 + k^2*(-19 + 48*q^2 - 35*q^4)) + k^2*(-2 + q^2)^6*(k^4 + k^2*(48 - 72*q^2) + 192*(1 - 2*q^2 + 3*q^4)) + omega^4*(-2 + q^2)^2*(3*k^2*(4 - 5*q^2)^2 + 4*(254 - 918*q^2 + 1383*q^4 - 865*q^6)) - 6*I*omega*(-2 + q^2)^5*(k^4*(-5 + 7*q^2) - 8*k^2*(6 - 14*q^2 + 19*q^4) + 64*(1 - 3*q^2 + 6*q^4 + q^6)) + 3*omega^2*(-2 + q^2)^4*(k^4*(-4 + 5*q^2) - 4*k^2*(38 - 99*q^2 + 85*q^4) + 32*(1 - q^2 - 6*q^4 + 38*q^6)))*c0)/(384*(-2 + q^2)^6*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2)*(-6 + I*omega + 3*q^2)))
cphiH4(q, k, omega, c0) = ((k^8*(-2 + q^2)^8 - 4*k^6*(-2 + q^2)^6*(omega^2*(4 - 5*q^2) + 12*(-2 + q^2)^2*(-3 + 4*q^2) + 4*I*omega*(8 - 14*q^2 + 5*q^4)) + 4*k^2*(-2 + q^2)^2*(omega^6*(-4 + 5*q^2)^3 - 2304*(-2 + q^2)^6*(-1 + 2*q^2)*(1 + 2*q^4) - 60*I*omega^5*(-2 + q^2)*(-4 + 5*q^2)*(3 - 7*q^2 + 5*q^4) - 384*I*omega*(-2 + q^2)^5*(-1 + 2*q^2)*(11 - 4*q^2 + 24*q^4) + 48*I*omega^3*(-2 + q^2)^3* (-157 + 513*q^2 - 693*q^4 + 410*q^6) + 48*omega^2*(-2 + q^2)^4*(-188 + 579*q^2 - 797*q^4 + 590*q^6) - 4*omega^4*(-2 + q^2)^2*(-836 + 2892*q^2 - 3798*q^4 + 1915*q^6)) + omega*(omega^7*(4 - 5*q^2)^4 - 8*I*omega^6*(4 - 5*q^2)^2*(-2 + q^2)*(29 - 65*q^2 + 50*q^4) + 18432*I*(-2 + q^2)^7*(-1 + 3*q^2 - 5*q^4 + 10*q^6 + q^8) - 768*omega*(-2 + q^2)^6* (-18 + 47*q^2 - 73*q^4 + 76*q^6 + 340*q^8) - 384*I*omega^2*(-2 + q^2)^5*(81 - 311*q^2 + 588*q^4 - 954*q^6 +   1243*q^8) + 32*I*omega^4*(-2 + q^2)^3*(1849 - 7919*q^2 + 14865*q^4 - 15194*q^6 + 7180*q^8) - 8*omega^5*(-2 + q^2)^2*(2662 - 12020*q^2 + 22554*q^4 - 21125*q^6 + 8275*q^8) + 48*omega^3*(-2 + q^2)^4*(1632 - 6664*q^2 + 12563*q^4 - 14606*q^6 + 9355*q^8)) + 6*k^4*(-2 + q^2)^4*(omega^4*(4 - 5*q^2)^2 + 32*(-2 + q^2)^4*(19 - 41*q^2 + 36*q^4) - 4*I*omega^3*(-2 + q^2)*(31 - 75*q^2 + 50*q^4) + 16*I*omega*(-2 + q^2)^3*(40 - 89*q^2 + 72*q^4) - 4*omega^2*(-2 + q^2)^2*(108 + 37*q^2*(-7 + 5*q^2))))*c0)/(6144*(-2 + q^2)^8*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2)*(-6 + I*omega + 3*q^2)*(-8 + I*omega + 4*q^2))
cphiH5(q, k, omega, c0) = -(((k^10*(-2 + q^2)^10 - 5*k^8*(-2 + q^2)^8*(omega^2*(4 - 5*q^2) + 16*(-2 + q^2)^2*(-4 + 5*q^2) + 2*I*omega*(22 - 37*q^2 + 13*q^4)) + 2*k^6*(-2 + q^2)^6*(5*omega^4*(4 - 5*q^2)^2 - 20*I*omega^3*(-2 + q^2)*(43 - 102*q^2 + 65*q^4) + 80*I*omega*(-2 + q^2)^3*(119 - 258*q^2 + 178*q^4) + 96*(-2 + q^2)^4*(127 - 273*q^2 + 200*q^4) - 20*omega^2*(-2 + q^2)^2*(212 - 491*q^2 + 323*q^4)) + 2*k^4*(-2 + q^2)^4*(5*omega^6*(-4 + 5*q^2)^3 - 30*I*omega^5*(-2 + q^2)*(-4 + 5*q^2)*(42 - 97*q^2 + 65*q^4) - 1536*(-2 + q^2)^6*(-140 + 368*q^2 - 425*q^4 + 300*q^6) - 960*I*omega*(-2 + q^2)^5* (-309 + 850*q^2 - 1001*q^4 + 636*q^6) + 120*I*omega^3*(-2 + q^2)^3*(-1044 + 3369*q^2 - 4180*q^4 +   2069*q^6) - 20*omega^4*(-2 + q^2)^2*(-1730 + 5904*q^2 - 7359*q^4 + 3385*q^6) + 96*omega^2*(-2 + q^2)^4*(-2752 + 8405*q^2 - 10351*q^4 + 5612*q^6)) + k^2*(-2 + q^2)^2*(5*omega^8*(4 - 5*q^2)^4 - 40*I*omega^7*(4 - 5*q^2)^2*(-2 + q^2)*(41 - 92*q^2 + 65*q^4) + 737280*(-2 + q^2)^8*(1 - 2*q^2 + q^4 + 5*q^8) + 30720*I*omega*(-2 + q^2)^7*(50 - 118*q^2 + 103*q^4 -   80*q^6 + 279*q^8) - 120*omega^6*(-2 + q^2)^2*(1906 - 8608*q^2 + 15646*q^4 - 13695*q^6 + 4875*q^8) - 1920*I*omega^3*(-2 + q^2)^5*(2461 - 9204*q^2 + 15240*q^4 - 14789*q^6 + 7995*q^8) + 160*I*omega^5*(-2 + q^2)^3*(6733 - 28799*q^2 + 51285*q^4 - 46271*q^6 + 18085*q^8) - 768*omega^2*(-2 + q^2)^6*(5530 - 18941*q^2 + 29171*q^4 - 28984*q^6 + 21540*q^8) + 80*omega^4*(-2 + q^2)^4*(37064 - 149560*q^2 + 259401*q^4 - 242182*q^6 + 107429*q^8)) + omega*(omega^9*(-4 + 5*q^2)^5 - 10*I*omega^8*(-2 + q^2)*(-4 + 5*q^2)^3*(40 - 87*q^2 + 65*q^4) - 40*omega^7*(-2 + q^2)^2*(-4 + 5*q^2)*(1678 - 7334*q^2 + 13290*q^4 - 11945*q^6 + 4525*q^8) - 1474560*I*(-2 + q^2)^9*(1 - 3*q^2 + 4*q^4 - 5*q^6 + 15*q^8 + q^10) + 12288*omega*(-2 + q^2)^8* (135 - 381*q^2 + 548*q^4 - 906*q^6 + 1617*q^8 + 2399*q^10) + 7680*I*omega^2*(-2 + q^2)^7* (-270 + 1129*q^2 - 2022*q^4 + 2279*q^6 - 3892*q^8 + 8300*q^10) + 80*I*omega^6*(-2 + q^2)^3* (-19010 + 101172*q^2 - 234088*q^4 + 300211*q^6 - 216510*q^8 + 70175*q^10) - 768*omega^3*(-2 + q^2)^6*(-11555 + 51692*q^2 - 106119*q^4 + 137908*q^6 - 137926*q^8 + 96582*q^10) - 160*I*omega^4*(-2 + q^2)^5*(-58528 + 277404*q^2 - 597095*q^4 + 777059*q^6 - 666237*q^8 + 314713*q^10) + 16*omega^5*(-2 + q^2)^4*(-312172 + 1570432*q^2 - 3516892*q^4 + 4547225*q^6 - 3526214*q^8 + 1327709*q^10)))*c0)/(122880*(-2 + q^2)^10*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2)*(-6 + I*omega + 3*q^2)*(-8 + I*omega + 4*q^2)*(-10 + I*omega + 5*q^2)))
cphiH6(q, k, omega, c0) = ((k^12*(-2 + q^2)^12 - 6*k^10*(-2 + q^2)^10*(omega^2*(4 - 5*q^2) + 20*(-2 + q^2)^2*(-5 + 6*q^2) + 4*I*omega*(-2 + q^2)*(-7 + 8*q^2)) + 3*k^8*(-2 + q^2)^8*(5*omega^4*(4 - 5*q^2)^2 - 20*I*omega^3*(-2 + q^2)*(55 - 129*q^2 + 80*q^4) + 80*I*omega*(-2 + q^2)^3*(261 - 557*q^2 + 355*q^4) - 20*omega^2*(-2 + q^2)^2*(350 - 795*q^2 + 499*q^4) + 64*(-2 + q^2)^4*(527 - 1123*q^2 + 750*q^4)) + 4*k^6*(-2 + q^2)^6*(5*omega^6*(-4 + 5*q^2)^3 - 60*I*omega^5*(-2 + q^2)*(-4 + 5*q^2)*(27 - 62*q^2 + 40*q^4) - 1152*(-2 + q^2)^6*(-1175 + 3257*q^2 - 3690*q^4 + 2000*q^6) + 240*I*omega^3*(-2 + q^2)^3* (-1209 + 3883*q^2 - 4627*q^4 + 2098*q^6) - 20*omega^4*(-2 + q^2)^2*(-2936 + 9954*q^2 - 12066*q^4 +   5275*q^6) - 192*I*omega*(-2 + q^2)^5*(-7409 + 21012*q^2 - 23829*q^4 + 12100*q^6) + 48*omega^2*(-2 + q^2)^4*(-17870 + 54557*q^2 - 64011*q^4 + 30392*q^6)) + 3*k^4*(5*omega^8*(8 - 14*q^2 + 5*q^4)^4 - 40*I*omega^7*(4 - 5*q^2)^2*(-2 + q^2)^5*(53 - 119*q^2 + 80*q^4) + 122880*(-2 + q^2)^12*(202 - 616*q^2 + 820*q^4 - 675*q^6 + 450*q^8) - 40*omega^6*(-2 + q^2)^6* (9894 - 44732*q^2 + 80016*q^4 - 67605*q^6 + 22825*q^8) + 3072*I*omega*(-2 + q^2)^11* (13285 - 42408*q^2 + 59142*q^4 - 49475*q^6 + 28650*q^8) + 160*I*omega^5*(-2 + q^2)^7* (16267 - 69809*q^2 + 121548*q^4 - 103544*q^6 + 36835*q^8) - 768*omega^2*(-2 + q^2)^10* (56800 - 202188*q^2 + 311317*q^4 - 268723*q^6 + 125760*q^8) - 384*I*omega^3*(-2 + q^2)^9* (70351 - 268084*q^2 + 434003*q^4 - 374833*q^6 + 155794*q^8) + 16*omega^4*(-2 + q^2)^8* (660472 - 2683380*q^2 + 4529901*q^4 - 3890762*q^6 + 1478265*q^8)) + omega*(omega^11*(4 - 5*q^2)^6 - 12*I*omega^10*(4 - 5*q^2)^4*(-2 + q^2)*(51 - 109*q^2 + 80*q^4) - 20*omega^9*(8 - 14*q^2 + 5*q^4)^2*(8132 - 34888*q^2 + 62070*q^4 - 54505*q^6 + 20225*q^8) + 176947200*I*(-2 + q^2)^11*(-1 + 3*q^2 - 3*q^4 + 21*q^10 + q^12) - 4423680*omega*(-2 + q^2)^10* (-57 + 165*q^2 - 189*q^4 + 178*q^6 - 483*q^8 + 1311*q^10 + 1087*q^12) + 240*I*omega^8*(-2 + q^2)^3*(102332 - 660236*q^2 + 1870154*q^4 - 3006942*q^6 + 2920255*q^8 - 1632175*q^10 +   409375*q^12) - 12288*I*omega^2*(-2 + q^2)^9*(15770 - 74187*q^2 + 131064*q^4 - 73816*q^6 - 82743*q^8 -   52398*q^10 + 955638*q^12) + 9216*omega^3*(-2 + q^2)^8*(158130 - 770428*q^2 + 1700859*q^4 - 2283188*q^6 +   2227041*q^8 - 2055688*q^10 + 1728740*q^12) - 192*I*omega^6*(-2 + q^2)^5*(2861248 - 16579750*q^2 +   43325035*q^4 - 66983237*q^6 + 66689861*q^8 - 41839355*q^10 + 13086384*q^12) + 768*I*omega^4*(-2 + q^2)^7*(2539220 - 13101426*q^2 + 30893961*q^4 - 44551607*q^6 + 45002574*q^8 -   34462563*q^10 + 17049509*q^12) - 192*omega^5*(-2 + q^2)^6*(6940000 - 37994752*q^2 + 94689534*q^4 -   142287873*q^6 + 143195801*q^8 - 97608747*q^10 + 36494765*q^12) + 16*omega^7*(-2 + q^2)^4* (9044128 - 55355748*q^2 + 150910188*q^4 - 238465120*q^6 + 234500511*q^8 - 137994186*q^10 +   38048395*q^12)) + 6*k^2*(-2 + q^2)^2*(omega^10*(-4 + 5*q^2)^5 - 20*I*omega^9*(-2 + q^2)*(-4 + 5*q^2)^3* (26 - 57*q^2 + 40*q^4) - 14745600*(-2 + q^2)^10*(1 + q^2)^2*(-1 + 4*q^2 - 7*q^4 + 6*q^6) - 122880*I*omega*(-2 + q^2)^9*(-1 + 2*q^2)*(274 - 96*q^2 + 108*q^4 + 844*q^6 + 933*q^8) - 20*omega^8*(-2 + q^2)^2*(-4 + 5*q^2)*(5900 - 25992*q^2 + 46332*q^4 - 39895*q^6 + 14100*q^8) + 1536*I*omega^3*(-2 + q^2)^7*(-106505 + 442344*q^2 - 822500*q^4 + 923592*q^6 - 730364*q^8 + 392940*q^10) - 320*I*omega^5*(-2 + q^2)^5*(-192750 + 925040*q^2 - 1955263*q^4 + 2358816*q^6 - 1699219*q^8 + 605870*q^10) + 16*omega^6*(-2 + q^2)^4*(-1193252 + 6072872*q^2 - 13401032*q^4 + 16392715*q^6 - 11375404*q^8 +   3631309*q^10) - 64*omega^4*(-2 + q^2)^6*(-1999760 + 8998252*q^2 - 18048621*q^4 + 21273568*q^6 -   16000457*q^8 + 6671034*q^10) + 3072*omega^2*(-2 + q^2)^8*(-39070 + 147321*q^2 - 245633*q^4 + 248086*q^6 +   448*q^8*(-449 + 387*q^2)) + 160*I*omega^7*(-2 + q^2)^3*(-23762 + 127643*q^2 +   4*q^4*(-73007 + 90073*q^2 - 60550*q^4 + 17800*q^6))))*c0)/(2949120*(-2 + q^2)^12*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2)*(-6 + I*omega + 3*q^2)*(-8 + I*omega + 4*q^2)*(-10 + I*omega + 5*q^2)*(-12 + I*omega + 6*q^2))
cphiH7(q, k, omega, c0) = -(((k^14*(-2 + q^2)^14 - 7*k^12*(-2 + q^2)^12*(omega^2*(4 - 5*q^2) + 24*(-2 + q^2)^2*(-6 + 7*q^2) + 2*I*omega*(34 - 55*q^2 + 19*q^4)) + 21*k^10*(-2 + q^2)^10*(omega^4*(4 - 5*q^2)^2 - 4*I*omega^3*(-2 + q^2)*(67 - 156*q^2 + 95*q^4) + 64*(-2 + q^2)^4*(236 - 499*q^2 + 315*q^4) + 16*I*omega*(-2 + q^2)^3*(484 - 1022*q^2 + 621*q^4) - 4*omega^2*(-2 + q^2)^2*(522 - 1171*q^2 + 713*q^4)) + k^8*(-2 + q^2)^8*(35*omega^6*(-4 + 5*q^2)^3 - 210*I*omega^5*(-2 + q^2)*(-4 + 5*q^2)*(66 - 151*q^2 + 95*q^4) + 840*I*omega^3*(-2 + q^2)^3*(-4634 + 14847*q^2 - 17274*q^4 + 7435*q^6) - 140*omega^4*(-2 + q^2)^2* (-4454 + 15042*q^2 - 17919*q^4 + 7585*q^6) - 4608*(-2 + q^2)^6*(-8134 + 23061*q^2 - 25627*q^4 +   12250*q^6) - 2688*I*omega*(-2 + q^2)^5*(-11824 + 34009*q^2 - 37657*q^4 + 17175*q^6) + 672*omega^2*(-2 + q^2)^4*(-21893 + 66879*q^2 - 76316*q^4 + 33662*q^6)) + k^6*(-2 + q^2)^6*(35*omega^8*(4 - 5*q^2)^4 - 280*I*omega^7*(4 - 5*q^2)^2*(-2 + q^2)*(65 - 146*q^2 + 95*q^4) - 280*omega^6*(-2 + q^2)^2*(15190 - 68744*q^2 + 121788*q^4 - 100685*q^6 + 32875*q^8) + 64512*I*omega*(-2 + q^2)^7*(31268 - 106200*q^2 + 153991*q^4 - 122333*q^6 + 51850*q^8) + 1120*I*omega^5*(-2 + q^2)^3*(31963 - 137591*q^2 + 236562*q^4 - 194951*q^6 + 65590*q^8) + 36864*(-2 + q^2)^8*(42895 - 141997*q^2 + 201949*q^4 - 160965*q^6 + 73500*q^8) - 2688*I*omega^3*(-2 + q^2)^5*(245193 - 947401*q^2 + 1517895*q^4 - 1239468*q^6 + 453968*q^8) + 336*omega^4*(-2 + q^2)^4*(567456 - 2320476*q^2 + 3863671*q^4 - 3173482*q^6 + 1108015*q^8) - 768*omega^2*(-2 + q^2)^6*(1929018 - 7038818*q^2 + 10824397*q^4 - 8772301*q^6 + 3410918*q^8)) + 3*k^4*(-2 + q^2)^4*(7*omega^10*(-4 + 5*q^2)^5 - 70*I*omega^9*(-2 + q^2)*(-4 + 5*q^2)^3* (64 - 141*q^2 + 95*q^4) - 280*omega^8*(-2 + q^2)^2*(-4 + 5*q^2)*(4574 - 20258*q^2 + 35760*q^4 -   29995*q^6 + 10150*q^8) - 2949120*(-2 + q^2)^10*(-2044 + 7090*q^2 - 10662*q^4 + 9359*q^6 - 6125*q^8 +   4410*q^10) - 172032*I*omega*(-2 + q^2)^9*(-65375 + 236424*q^2 - 374037*q^4 + 348301*q^6 - 232875*q^8 +   137430*q^10) + 560*I*omega^7*(-2 + q^2)^3*(-95286 + 515452*q^2 - 1172786*q^4 + 1415913*q^6 - 914180*q^8 +   253525*q^10) + 10752*I*omega^3*(-2 + q^2)^7*(-942396 + 4061340*q^2 - 7714013*q^4 + 8456984*q^6 -   5775557*q^8 + 2169264*q^10) + 6144*omega^2*(-2 + q^2)^8*(-2232795 + 8966442*q^2 - 15926566*q^4 +   16597489*q^6 - 11397718*q^8 + 4995606*q^10) + 112*omega^6*(-2 + q^2)^4*(-3194396 + 16428672*q^2 -   36058684*q^4 + 42876349*q^6 - 28057974*q^8 + 8175809*q^10) - 224*I*omega^5*(-2 + q^2)^5* (-7183576 + 35004728*q^2 - 73758153*q^4 + 86019485*q^6 - 57116443*q^8 + 17714595*q^10) - 128*omega^4*(-2 + q^2)^6*(-38454878 + 176877838*q^2 - 355752510*q^4 + 404568205*q^6 - 272659382*q^8 +   91647831*q^10)) + k^2*(-2 + q^2)^2*(7*omega^12*(4 - 5*q^2)^6 - 84*I*omega^11*(4 - 5*q^2)^4*(-2 + q^2)* (63 - 136*q^2 + 95*q^4) - 28*omega^10*(8 - 14*q^2 + 5*q^4)^2*(63604 - 275648*q^2 + 485490*q^4 -   413525*q^6 + 145375*q^8) + 123863040*I*omega*(-2 + q^2)^11*(294 - 688*q^2 + 28*q^4 + 1896*q^6 -   3628*q^8 + 3334*q^10 + 2367*q^12) + 1680*I*omega^9*(-2 + q^2)^3*(208716 - 1360048*q^2 + 3850390*q^4 -   6105942*q^6 + 5757560*q^8 - 3074000*q^10 + 726375*q^12) - 147456*omega^2*(-2 + q^2)^10* (1151640 - 4784951*q^2 + 8738345*q^4 - 9196617*q^6 + 6391309*q^8 - 4387600*q^10 + 5424342*q^12) - 86016*I*omega^3*(-2 + q^2)^9*(3152810 - 14396538*q^2 + 29504808*q^4 - 36189199*q^6 + 30708531*q^8 -   21199272*q^10 + 12277212*q^12) - 1344*I*omega^7*(-2 + q^2)^5*(11251724 - 66291362*q^2 + 173495327*q^4 -   262570258*q^6 + 247297618*q^8 - 140260414*q^10 + 37906311*q^12) + 112*omega^8*(-2 + q^2)^4* (24965968 - 154870428*q^2 + 422336028*q^4 - 655592800*q^6 + 618406251*q^8 - 339544086*q^10 +   85160395*q^12) + 5376*I*omega^5*(-2 + q^2)^7*(26891900 - 141500422*q^2 + 335604388*q^4 - 473306142*q^6 +   438603821*q^8 - 270290156*q^10 + 91895731*q^12) + 9216*omega^4*(-2 + q^2)^8* (26973400 - 133096138*q^2 + 296638676*q^4 - 396617694*q^6 + 358533069*q^8 - 232880876*q^10 +   96211041*q^12) - 1344*omega^6*(-2 + q^2)^6*(41972504 - 234188616*q^2 + 585468938*q^4 - 859075809*q^6 +   805173699*q^8 - 474341431*q^10 + 141236131*q^12) + 14863564800*(-2 + q^2)^12* (1 - 2*q^2 - q^4 + 8*q^6 + 7*q^8*(-2 + 2*q^2 + q^4))) + omega*(omega^13*(-4 + 5*q^2)^7 - 14*I*omega^12*(-2 + q^2)*(-4 + 5*q^2)^5*(62 - 131*q^2 + 95*q^4) - 28*omega^11*(-2 + q^2)^2*(-4 + 5*q^2)^3*(11956 - 50678*q^2 + 89154*q^4 - 77135*q^6 + 28225*q^8) - 29727129600*I*(-2 + q^2)^13*(1 + q^2)*(1 - 4*q^2 + 6*q^4 - q^6 - 13*q^8 + 27*q^10 + q^12) + 35389440*omega*(-2 + q^2)^12*(1407 - 4121*q^2 + 3382*q^4 + 2107*q^6 - 4117*q^8 - 10727*q^10 + 55300*q^12 +   30157*q^14) + 2064384*I*omega^2*(-2 + q^2)^11*(-11200 + 63107*q^2 - 118122*q^4 + 15443*q^6 + 345821*q^8 -   802053*q^10 + 668328*q^12 + 1386228*q^14) - 43008*I*omega^4*(-2 + q^2)^9*(-12535030 + 69982040*q^2 -   178818192*q^4 + 278174582*q^6 - 298887304*q^8 + 246529617*q^10 - 176356176*q^12 + 96574167*q^14) + 112*omega^9*(-2 + q^2)^4*(-24755896 + 179885936*q^2 - 586452936*q^4 + 1122046060*q^6 - 1373791082*q^8 +   1085905887*q^10 - 516019630*q^12 + 113701925*q^14) + 10752*omega^5*(-2 + q^2)^8* (-40875620 + 241285290*q^2 - 653995063*q^4 + 1081484937*q^6 - 1227313399*q^8 + 1023113195*q^10 -   638648230*q^12 + 245261726*q^14) - 224*I*omega^8*(-2 + q^2)^5*(-77215424 + 533990116*q^2 -   1671380916*q^4 + 3108482222*q^6 - 3766473013*q^8 + 3021627297*q^10 - 1505780639*q^12 + 360942205*q^14) + 2688*I*omega^6*(-2 + q^2)^7*(-82503296 + 514240080*q^2 - 1468684518*q^4 + 2544392957*q^6 - 2978099226*q^8 +   2459754678*q^10 - 1396185872*q^12 + 432485733*q^14) - 192*omega^7*(-2 + q^2)^6* (-388860368 + 2555232940*q^2 - 7654381410*q^4 + 13779074498*q^6 - 16458944467*q^8 + 13404214167*q^10 -   7076794427*q^12 + 1891341499*q^14) + 56*I*omega^10*(-2 + q^2)^3*(-4 + 5*q^2)* (1350104 - 8605212*q^2 + 24100896*q^4 + 25*q^6*(-1530002 + 1462125*q^2 - 802230*q^4 + 197825*q^6)) - 24576*omega^3*(-2 + q^2)^10*(-13674640 + 72489761*q^2 - 173197536*q^4 + 245296019*q^6 +   2*q^8*(-114919661 + 82101033*q^2 - 74803608*q^4 + 89057787*q^6))))*c0)/(82575360*(-2 + q^2)^14*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2)*(-6 + I*omega + 3*q^2)*(-8 + I*omega + 4*q^2)*(-10 + I*omega + 5*q^2)*(-12 + I*omega + 6*q^2)*(-14 + I*omega + 7*q^2)))
cphiH8(q, k, omega, c0) = ((k^16*(-2 + q^2)^16 - 8*k^14*(-2 + q^2)^14*(omega^2*(4 - 5*q^2) + 28*(-2 + q^2)^2*(-7 + 8*q^2) + 4*I*omega*(20 - 32*q^2 + 11*q^4)) + 28*k^12*(-2 + q^2)^12*(omega^4*(4 - 5*q^2)^2 - 4*I*omega^3*(-2 + q^2)*(79 - 183*q^2 + 110*q^4) + 96*(-2 + q^2)^4*(307 - 645*q^2 + 392*q^4) - 4*omega^2*(-2 + q^2)^2*(728 - 1619*q^2 + 965*q^4) + 16*I*omega*(-2 + q^2)^3*(806 - 1689*q^2 + 994*q^4)) + 8*k^10*(-2 + q^2)^10*(7*omega^6*(-4 + 5*q^2)^3 - 84*I*omega^5*(-2 + q^2)*(-4 + 5*q^2)*(39 - 89*q^2 + 55*q^4) + 336*I*omega^3*(-2 + q^2)^3*(-3945 + 12621*q^2 - 14453*q^4 + 6010*q^6) - 2688*I*omega*(-2 + q^2)^5*(-5994 + 17384*q^2 - 18937*q^4 + 8106*q^6) - 28*omega^4*(-2 + q^2)^2*(-6284 + 21168*q^2 - 24918*q^4 + 10315*q^6) + 336*omega^2*(-2 + q^2)^4* (-18112 + 55367*q^2 - 62041*q^4 + 26114*q^6) - 768*(-2 + q^2)^6*(-29498 + 84683*q^2 - 92708*q^4 +   41160*q^6)) + 2*k^8*(-2 + q^2)^8*(35*omega^8*(4 - 5*q^2)^4 - 280*I*omega^7*(4 - 5*q^2)^2*(-2 + q^2)* (77 - 173*q^2 + 110*q^4) - 840*omega^6*(-2 + q^2)^2*(7202 - 32620*q^2 + 57418*q^4 - 46775*q^6 +   14925*q^8) + 1120*I*omega^5*(-2 + q^2)^3*(55333 - 238787*q^2 + 407235*q^4 - 328430*q^6 + 106510*q^8) + 12288*I*omega*(-2 + q^2)^7*(715547 - 2510611*q^2 + 3690472*q^4 - 2835287*q^6 + 1043700*q^8) - 2688*I*omega^3*(-2 + q^2)^5*(656117 - 2560905*q^2 + 4077846*q^4 - 3220204*q^6 + 1095333*q^8) + 112*omega^4*(-2 + q^2)^4*(3636520 - 14947712*q^2 + 24679581*q^4 - 19711682*q^6 + 6527365*q^8) - 768*omega^2*(-2 + q^2)^6*(6544636 - 24286961*q^2 + 37304597*q^4 - 29141458*q^6 + 10254258*q^8) + 18432*(-2 + q^2)^8*(457337 - 1576094*q^2 + 2291785*q^4 + 5488*q^6*(-323 + 125*q^2))) + 8*k^6*(-2 + q^2)^6*(7*omega^10*(-4 + 5*q^2)^5 - 140*I*omega^9*(-2 + q^2)*(-4 + 5*q^2)^3* (38 - 84*q^2 + 55*q^4) + 1120*I*omega^7*(-2 + q^2)^3*(-83596 + 454587*q^2 - 1030964*q^4 + 1227560*q^6 -   772140*q^8 + 206050*q^10) - 73728*I*omega*(-2 + q^2)^9*(-1487256 + 5813084*q^2 - 9960261*q^4 +   9835181*q^6 - 6170766*q^8 + 2355920*q^10) + 112*omega^6*(-2 + q^2)^4*(-6991180 + 36249616*q^2 -   79361128*q^4 + 92750267*q^6 - 58537844*q^8 + 16108109*q^10) - 448*I*omega^5*(-2 + q^2)^5* (-10009930 + 49373556*q^2 - 104004842*q^4 + 118956191*q^6 - 75332856*q^8 + 21523855*q^10) + 3072*omega^2*(-2 + q^2)^8*(-30206844 + 126230628*q^2 - 230946685*q^4 + 240737823*q^6 - 152854104*q^8 +   52328696*q^10) + 1536*I*omega^3*(-2 + q^2)^7*(-32220909 + 142614581*q^2 - 274624875*q^4 + 296883367*q^6 -   188795417*q^8 + 59960656*q^10) - 192*omega^4*(-2 + q^2)^6*(-93204328 + 436333856*q^2 - 881307565*q^4 +   982993130*q^6 - 624368785*q^8 + 186865676*q^10) - 147456*(-2 + q^2)^10*(-506905 + 1932549*q^2 -   3231078*q^4 + 3130652*q^6 + 164640*q^8*(-12 + 5*q^2)) - 140*omega^8*(-2 + q^2)^2*(-4 + 5*q^2)* (13100 + 7*q^2*(-8320 + 14592*q^2 - 12025*q^4 + 3950*q^6))) - 8*k^2*(-2 + q^2)^2*((-omega^14)*(-4 + 5*q^2)^7 + 28*I*omega^13*(-2 + q^2)*(-4 + 5*q^2)^5* (37 - 79*q^2 + 55*q^4) + 416179814400*(-2 + q^2)^14*(-1 + 2*q^2)*(1 + 2*q^4)*(1 - 4*q^4 + 8*q^6 + 2*q^8) + 28*omega^12*(-2 + q^2)^2*(-4 + 5*q^2)^3*(17324 - 74212*q^2 + 129660*q^4 - 109600*q^6 + 38375*q^8) - 112*omega^10*(-2 + q^2)^4*(-56207024 + 413346952*q^2 - 1353556560*q^4 + 2575887380*q^6 - 3098557132*q^8 +   2371516062*q^10 - 1074426005*q^12 + 222603175*q^14) + 448*I*omega^9*(-2 + q^2)^5* (-114215284 + 801970172*q^2 - 2526513432*q^4 + 4673337523*q^6 - 5541071423*q^8 + 4259312994*q^10 -   1984698991*q^12 + 434638445*q^14) - 5376*I*omega^7*(-2 + q^2)^7*(-235585672 + 1499432278*q^2 -   4332358831*q^4 + 7482720659*q^6 - 8522387966*q^8 + 6579275297*q^10 - 3288505209*q^12 + 840714186*q^14) + 24576*omega^4*(-2 + q^2)^10*(-516156550 + 2771222492*q^2 - 6767927313*q^4 + 9972368495*q^6 -   9974023123*q^8 + 7341207876*q^10 - 4302834273*q^12 + 1849687182*q^14) + 6144*I*omega^5*(-2 + q^2)^9*(-1376907080 + 7857823537*q^2 - 20448138136*q^4 + 32143799488*q^6 -   34138807039*q^8 + 25962114170*q^10 - 14305705620*q^12 + 4811514556*q^14) + 64*omega^8*(-2 + q^2)^6*(-4669825576 + 31251749924*q^2 - 94452326568*q^4 + 169211941948*q^6 -   197099187404*q^8 + 151995364587*q^10 - 73155884566*q^12 + 17151946715*q^14) - 768*omega^6*(-2 + q^2)^8*(-5053581576 + 30510472968*q^2 - 83910798904*q^4 + 138876671215*q^6 -   153597897883*q^8 + 118209023771*q^10 - 61772577677*q^12 + 17703021446*q^14) - 112*I*omega^11*(-2 + q^2)^3*(-4 + 5*q^2)*(1210468 - 7796412*q^2 + 21867462*q^4 +   5*q^6*(-6877097 + 6430905*q^2 - 3406725*q^4 + 800750*q^6)) - 589824*omega^2*(-2 + q^2)^12* (-11447100 + 52537857*q^2 - 106655545*q^4 + 2*q^6*(62019790 - 43685763*q^2 + 17314648*q^4 - 8193038*q^6 +     26842188*q^8)) - 98304*I*omega^3*(-2 + q^2)^11*(-124769365 + 623702777*q^2 - 1404860277*q^4 +   2*q^6*(942144034 - 844635746*q^2 + 561815763*q^4 - 351807435*q^6 + 240608046*q^8)) + 990904320*I*omega*(-2 + q^2)^13*(-1 + 2*q^2)*(1089 + 2*q^2*(-180 - 859*q^2 + 4104*q^4 - 3504*q^6 +     8168*q^8 + 2532*q^10))) + omega*(omega^15*(4 - 5*q^2)^8 - 16*I*omega^14*(4 - 5*q^2)^6*(-2 + q^2)* (73 - 153*q^2 + 110*q^4) - 336*omega^13*(4 - 5*q^2)^4*(-2 + q^2)^2*(1834 - 7708*q^2 + 13458*q^4 -   11525*q^6 + 4175*q^8) + 6658877030400*I*(-2 + q^2)^15*(-1 + 3*q^2 - q^4 - 10*q^6 + 27*q^8 - 42*q^10 +   42*q^12 + 36*q^14 + q^16) - 9437184*I*omega^2*(-2 + q^2)^13*(327355 - 2545773*q^2 + 5566748*q^4 +   142762*q^6 - 24489189*q^8 + 64539830*q^10 - 107602038*q^12 + 108531588*q^14 + 94502097*q^16) + 672*omega^11*(-2 + q^2)^4*(60687912 - 512349152*q^2 + 1956711776*q^4 - 4439923736*q^6 + 6584867288*q^8 -   6572917848*q^10 + 4331815855*q^12 - 1727436350*q^14 + 318898375*q^16) - 5376*I*omega^10*(-2 + q^2)^5*(69902468 - 564321100*q^2 + 2074476072*q^4 - 4569787810*q^6 + 6654545778*q^8 -   6619587536*q^10 + 4430346903*q^12 - 1834864895*q^14 + 360379075*q^16) - 86016*I*omega^6*(-2 + q^2)^9*(1235578912 - 8234789972*q^2 + 25357271809*q^4 - 47865610127*q^6 +   62028978831*q^8 - 58634357651*q^10 + 41792205645*q^12 - 22093195504*q^14 + 6953983161*q^16) + 196608*omega^3*(-2 + q^2)^12*(536861920 - 3094690296*q^2 + 8057941859*q^4 - 12389976938*q^6 +   12198261627*q^8 - 7553129248*q^10 + 2727243276*q^12 - 2893511088*q^14 + 7657843932*q^16) + 196608*I*omega^4*(-2 + q^2)^11*(992460595 - 5977794877*q^2 + 16516947937*q^4 - 27722332634*q^6 +   31642544732*q^8 - 26418316244*q^10 + 17982309843*q^12 - 12473286972*q^14 + 8151587073*q^16) + 5376*omega^7*(-2 + q^2)^8*(7901556448 - 55351895840*q^2 + 178927757136*q^4 - 353527415104*q^6 +   476238971645*q^8 - 460468221156*q^10 + 323815969918*q^12 - 157704633668*q^14 + 41705434557*q^16) - 24576*omega^5*(-2 + q^2)^10*(7396167170 - 46859073636*q^2 + 136978221942*q^4 - 245250823023*q^6 +   301978372413*q^8 - 274323285665*q^10 + 195901979761*q^12 - 115514711124*q^14 + 47289559828*q^16) - 256*omega^9*(-2 + q^2)^6*(9756017372 - 75221030120*q^2 + 265587537698*q^4 - 566330857184*q^6 +   807197224400*q^8 - 798445465331*q^10 + 543141267701*q^12 - 235142897423*q^14 + 49827746615*q^16) + 1024*I*omega^8*(-2 + q^2)^7*(11807740760 - 86835290052*q^2 + 293761980475*q^4 - 604256530799*q^6 +   839573156058*q^8 - 823146321085*q^10 + 569429563655*q^12 - 259926679944*q^14 + 60619666360*q^16) + 1344*I*omega^12*(4 - 5*q^2)^2*(-2 + q^2)^3*(144540 - 913308*q^2 + 2538719*q^4 +   5*q^6*(-799029 + 755565*q^2 - 409400*q^4 + 99750*q^6)) - 3963617280*omega*(-2 + q^2)^14* (-3174 + 9357*q^2 - 4559*q^4 + 4*q^6*(-5083 + 12183*q^2 - 13323*q^4 - 817*q^6 + 50028*q^8 + 19466*q^10))) + 4*k^4*(-2 + q^2)^4*(7*omega^12*(4 - 5*q^2)^6 - 84*I*omega^11*(4 - 5*q^2)^4*(-2 + q^2)* (75 - 163*q^2 + 110*q^4) - 28*omega^10*(8 - 14*q^2 + 5*q^4)^2*(91636 - 399944*q^2 + 699780*q^4 -   583925*q^6 + 197875*q^8) - 1344*I*omega^7*(-2 + q^2)^5*(32396648 - 193532642*q^2 + 508357623*q^4 -   760873881*q^6 + 694174393*q^8 - 371317443*q^10 + 91952488*q^12) + 112*omega^8*(-2 + q^2)^4* (55734760 - 349325508*q^2 + 954034284*q^4 - 1465777252*q^6 + 1348089621*q^8 - 709218636*q^10 +   167511895*q^12) - 12288*I*omega^3*(-2 + q^2)^9*(280913267 - 1341960918*q^2 + 2873770854*q^4 -   3645604705*q^6 + 3055426749*q^8 - 1769460627*q^10 + 633064740*q^12) + 768*I*omega^5*(-2 + q^2)^7* (1002528940 - 5399387314*q^2 + 12969208286*q^4 - 18172516387*q^6 + 16149485990*q^8 - 8977878091*q^10 +   2538545356*q^12) - 192*omega^6*(-2 + q^2)^6*(1126353200 - 6398631576*q^2 + 16109608856*q^4 -   23395456767*q^6 + 21113699955*q^8 - 11503652365*q^10 + 3019954201*q^12) + 1536*omega^4*(-2 + q^2)^8*(1271145784 - 6467074468*q^2 + 14736048799*q^4 - 19773437501*q^6 +   17181145781*q^8 - 9754379147*q^10 + 3040851276*q^12) + 247726080*(-2 + q^2)^12* (5993 - 23405*q^2 + 39748*q^4 - 38347*q^6 + 196*q^8*(121 - 65*q^2 + 60*q^4)) + 589824*I*omega*(-2 + q^2)^11*(5171600 - 20944361*q^2 + 37241868*q^4 - 38308351*q^6 +   784*q^8*(33211 - 18735*q^2 + 12690*q^4)) + 1680*I*omega^9*(-2 + q^2)^3*(370460 - 2431540*q^2 +   6885078*q^4 + 5*q^6*(-2165010 + 2003464*q^2 - 1038435*q^4 + 235850*q^6)) - 73728*omega^2*(-2 + q^2)^10*(55786500 + q^2*(-248875253 + 496266482*q^2 - 586173729*q^4 + 463808650*q^6 +     2786*q^8*(-97313 + 42612*q^2)))))*c0)/(2642411520*(-2 + q^2)^16*(-2 + I*omega + q^2)*(-4 + I*omega + 2*q^2)*(-6 + I*omega + 3*q^2)*(-8 + I*omega + 4*q^2)*(-10 + I*omega + 5*q^2)*(-12 + I*omega + 6*q^2)*(-14 + I*omega + 7*q^2)*(-16 + I*omega + 8*q^2))
cphiH9(q, k, omega, cphiH) = 0
cphiH10(q, k, omega, cphiH) = 0
cphiH11(q, k, omega, cphiH) = 0
cphiH12(q, k, omega, cphiH) = 0
cphiH13(q, k, omega, cphiH) = 0
end